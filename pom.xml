<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.etingyu</groupId>
    <artifactId>dbtool</artifactId>
    <version>1.6.1</version>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <maven.test.skip>true</maven.test.skip>
    </properties>

    <dependencies>
        <!-- https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc8 -->
        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc8</artifactId>
            <version>21.1.0.0</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.26</version>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.2.20</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>
<!--            <plugin>-->
<!--                <groupId>com.github.wvengen</groupId>-->
<!--                <artifactId>proguard-maven-plugin</artifactId>-->
<!--                <version>2.3.1</version>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        &lt;!&ndash;混淆时刻，这里是打包的时候混淆&ndash;&gt;-->
<!--                        <phase>compile</phase>-->
<!--                        <goals>-->
<!--                            &lt;!&ndash;使用插件的什么功能，当然是混淆&ndash;&gt;-->
<!--                            <goal>proguard</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--                <configuration>-->
<!--                    <proguardVersion>6.2.2</proguardVersion>-->
<!--                    &lt;!&ndash;是否将生成的PG文件安装部署&ndash;&gt;-->
<!--                    <attach>false</attach>-->
<!--                    &lt;!&ndash;是否混淆&ndash;&gt;-->
<!--                    <obfuscate>true</obfuscate>-->
<!--                    &lt;!&ndash;指定生成文件分类&ndash;&gt;-->
<!--                    <attachArtifactClassifier>pg</attachArtifactClassifier>-->
<!--                    <options>-->
<!--                        &lt;!&ndash;JDK目标版本1.8&ndash;&gt;-->
<!--                        <option>-target 1.8</option>-->
<!--                        &lt;!&ndash;不做收缩（删除注释、未被引用代码）&ndash;&gt;-->
<!--                        <option>-dontshrink</option>-->
<!--                        &lt;!&ndash;不做优化（变更代码实现逻辑）&ndash;&gt;-->
<!--&lt;!&ndash;                        <option>-dontoptimize</option>&ndash;&gt;-->
<!--                        &lt;!&ndash;不路过非公用类文件及成员&ndash;&gt;-->
<!--                        <option>-dontskipnonpubliclibraryclasses</option>-->
<!--                        <option>-dontskipnonpubliclibraryclassmembers</option>-->
<!--                        &lt;!&ndash;优化时允许访问并修改有修饰符的类和类的成员&ndash;&gt;-->
<!--                        <option>-allowaccessmodification</option>-->
<!--                        &lt;!&ndash;确定统一的混淆类的成员名称来增加混淆,防止冲突&ndash;&gt;-->
<!--                        <option>-useuniqueclassmembernames</option>-->
<!--                        &lt;!&ndash;不混淆所有包名，Spring配置中有大量固定写法的包名&ndash;&gt;-->
<!--                        <option>-keeppackagenames</option>-->
<!--                        &lt;!&ndash;不混淆所有特殊的类&ndash;&gt;-->
<!--                        <option>-->
<!--                            -keepattributes-->
<!--                            Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod-->
<!--                        </option>-->
<!--                        &lt;!&ndash;不混淆所有的set/get方法，毕竟项目中使用的部分第三方框架（例如Shiro）会用到大量的set/get映射&ndash;&gt;-->
<!--                        &lt;!&ndash;  <option>-keepclassmembers public class *{void set*(***);*** get*();}-->
<!--                          </option>&ndash;&gt;-->
<!--&lt;!&ndash;                        <option>-keepparameternames</option>&ndash;&gt;-->
<!--                        <option>-dontusemixedcaseclassnames</option>-->
<!--                        <option>-keep,includedescriptorclasses class com.etingyu.dbtool.Main {-->
<!--                            public static void main(***);-->
<!--                            }-->
<!--                        </option>-->
<!--&lt;!&ndash;                        <option>&ndash;&gt;-->
<!--&lt;!&ndash;                            -keep,includedescriptorclasses enum ** {&ndash;&gt;-->
<!--&lt;!&ndash;                            &lt;fields&gt;;&ndash;&gt;-->
<!--&lt;!&ndash;                            public static **[] values();&ndash;&gt;-->
<!--&lt;!&ndash;                            public static ** valueOf(java.lang.String);&ndash;&gt;-->
<!--&lt;!&ndash;                            }&ndash;&gt;-->
<!--&lt;!&ndash;                        </option>&ndash;&gt;-->
<!--                        &lt;!&ndash;不显示警告信息，如果显示则会出现Error无法完成混淆！&ndash;&gt;-->
<!--&lt;!&ndash;                        <option>-dontwarn **</option>&ndash;&gt;-->
<!--                    </options>-->
<!--                    <outjar>${project.artifactId}-${project.version}-pg.jar</outjar>-->
<!--                    &lt;!&ndash;添加依赖，这里你可以按你的需要修改，这里测试只需要一个JRE的Runtime包就行了&ndash;&gt;-->
<!--                    <libs>-->
<!--                        <lib>${java.home}/lib/rt.jar</lib>-->
<!--                        <lib>${java.home}/lib/jce.jar</lib>-->
<!--                    </libs>-->
<!--                    &lt;!&ndash;加载文件的过滤器，就是你的工程目录了&ndash;&gt;-->
<!--                    &lt;!&ndash;<inFilter>com/test/prog/**</inFilter>&ndash;&gt;-->
<!--                    &lt;!&ndash;<inFilter>com/itdct/es/**</inFilter>&ndash;&gt;-->
<!--                    &lt;!&ndash;对什么东西进行加载，这里仅有classes成功，毕竟你也不可能对配置文件及JSP混淆吧&ndash;&gt;-->
<!--                    <injar>classes</injar>-->
<!--                    &lt;!&ndash;输出目录&ndash;&gt;-->
<!--                    <outputDirectory>${project.build.directory}</outputDirectory>-->
<!--                </configuration>-->
<!--                <dependencies>-->
<!--                    &lt;!&ndash;使用6.0.2版本来混淆&ndash;&gt;-->
<!--                    <dependency>-->
<!--                        <groupId>net.sf.proguard</groupId>-->
<!--                        <artifactId>proguard-base</artifactId>-->
<!--                        <version>6.2.2</version>-->
<!--                        <scope>runtime</scope>-->
<!--                    </dependency>-->
<!--                </dependencies>-->
<!--            </plugin>-->

<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-antrun-plugin</artifactId>-->
<!--                <version>1.7</version>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>unpack-jar-features</id>-->
<!--                        <phase>prepare-package</phase>-->
<!--                        <goals>-->
<!--                            <goal>run</goal>-->
<!--                        </goals>-->
<!--                        <configuration>-->
<!--                            <target>-->
<!--                                <delete includeEmptyDirs="true">-->
<!--                                    <fileset dir="${project.build.directory}/classes" includes="**/*"/>-->
<!--                                </delete>-->
<!--                                <unzip dest="${project.build.directory}/classes">-->
<!--                                    <fileset dir="${project.build.directory}">-->
<!--                                        <include name="${project.artifactId}-${project.version}-pg.jar"/>-->
<!--                                    </fileset>-->
<!--                                </unzip>-->
<!--                                <delete file="${project.build.directory}/${project.artifactId}-${project.version}-pg.jar"/>-->
<!--                            </target>-->
<!--                        </configuration>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->

            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <appendAssemblyId>false</appendAssemblyId>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <archive>
                        <manifest>
                            <mainClass>com.etingyu.dbtool.Main</mainClass>
                        </manifest>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>assembly</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>